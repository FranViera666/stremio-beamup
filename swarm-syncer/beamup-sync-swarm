#!/usr/bin/env node

const http = require('http')
const httpGet = args => new Promise((resolve, reject) => http.get(args, resolve).on('error', reject))

const REGISTRY_URL = 'http://127.0.0.1:5000'
// @TODO input
const DOMAINS = ['stremio.info']

const HEADER = `version: '3.7'
services:`

const REGISTRY_TMPL = `   registry:
        image: registry:2
        volumes:
          - /var/lib/registry:/var/lib/registry
        ports:
          - '5000:5000'`

// @TODO: assigning a random port may not be needed, just use the docker overlay network to reach the container (use it's IP)
// @TODO: syslog for centralized log collection
// By default,the restart policy is "any" (it will always restart)
// @TODO restart max attempts?
// @TODO hardware limits
const APP_TMPL = (appName, image, port, vhost) => `   ${appName}:
        image: localhost:5000/${image}
        deploy:
          mode: global
        environment:
          - VIRTUAL_HOST=${vhost}
          - PORT=${port}
        command: /start web
        ports:
          - '${port}:${port}'`


async function getImages() {
	const res = await httpGet(`${REGISTRY_URL}/v2/_catalog`)
	if (res.statusCode !== 200) throw new Error(`Registry returned status ${res.status}`)
	res.setEncoding('utf8')
	return new Promise((resolve, reject) => {
		let body = ''
		res.on('data', d => body += d)
		res.on('error', reject)
		res.on('end', () => resolve(JSON.parse(body)))
	})
}

async function getConfig() {
	const { repositories } = await getImages()
	const repoCfg = (imageName, i) => {
		const appName = imageName.split('/').pop()
		const port = 8000 + i
		const vhost = DOMAINS.map(domain => `${appName}.${domain}`) 
		return APP_TMPL(appName, imageName+':latest', port, vhost)
	}
	return [HEADER, REGISTRY_TMPL].concat(repositories.map(repoCfg)).join('\n')
}
getConfig().then(console.log)
