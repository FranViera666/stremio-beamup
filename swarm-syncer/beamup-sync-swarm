#!/usr/bin/env node

const http = require('http')
const httpGet = args => new Promise((resolve, reject) => http.get(args, resolve).on('error', reject))

const START_PORT = 8000
const REGISTRY_URL = 'http://127.0.0.1:5000'
// @TODO input
const DOMAINS = ['stremio.info']

const HEADER = `version: '3.7'
services:`

// @TODO: assigning a random port may not be needed, just use the docker overlay network to reach the container (use it's IP)
// @TODO: syslog for centralized log collection
// By default,the restart policy is "any" (it will always restart)
// @TODO restart max attempts?
// @TODO hardware limits
const APP_TMPL = (appName, image, port, vhost) => `   ${appName}:
        image: ${image}
        deploy:
          mode: global
          resources:
            limits:
              cpus: '0.5'
              memory: 256m
        environment:
          - VIRTUAL_HOST=${vhost}
          - PORT=${port}
        command: /start web
        ports:
          - '${port}:${port}'`

async function getJSON(opts) {
	const res = await httpGet(opts)
	if (res.statusCode !== 200) throw new Error(`returned status ${res.status}`)
	res.setEncoding('utf8')
	return new Promise((resolve, reject) => {
		let body = ''
		res.on('data', d => body += d)
		res.on('error', reject)
		res.on('end', () => resolve(JSON.parse(body)))
	})

}

async function getImages() {
	return await getJSON(`${REGISTRY_URL}/v2/_catalog`)
}

async function getPortMapping() {
	const services = await getJSON({ socketPath: '/var/run/docker.sock', path: '/services' })
	let ports = {}
	services.forEach(service => {
		const { TargetPort, PublishedPort } = service.Endpoint.Ports[0]
		// @TODO: better imageName?
		const imageName = service.Spec.Labels['com.docker.stack.image']
		if (TargetPort === PublishedPort) ports[imageName] = TargetPort
	})
	return ports
}

async function getConfig() {	
	const [{ repositories }, portMapping] = await Promise.all([getImages(), getPortMapping()])
	let startPort = Math.max.apply(null, Object.values(portMapping)) || START_PORT
	const repoCfg = (imageName, i) => {
		const appName = imageName.split('/').pop()
		const fullImageName = `localhost:5000/${imageName}:latest`
		const port = portMapping[imageName] || portMapping[fullImageName] || ++startPort
		const vhost = DOMAINS.map(domain => `${appName}.${domain}`) 
		return APP_TMPL(appName, fullImageName, port, vhost)
	}
	return [HEADER].concat(repositories.map(repoCfg)).join('\n')
}
getConfig().then(console.log)
